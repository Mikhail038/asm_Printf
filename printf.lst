     1                                  ;24.03.22
     2                                  ;=================================================
     3                                  
     4                                  section .rodata
     5                                  
     6                                  JUMP_TABLE:
     7 00000000 [9900000000000000]                              dq      Case_bin        ;b
     8 00000008 [6C00000000000000]                              dq      Case_chr        ;c
     9 00000010 [CD00000000000000]                              dq      Case_dec        ;d
    10 00000018 [4701000000000000]-     times ('i' - 'd' - 1)   dq      Case_err
    10 00000018 <rep 4h>           
    11 00000038 [CD00000000000000]                              dq      Case_dec        ;i
    12 00000040 [4701000000000000]-     times ('o' - 'i' - 1)   dq      Case_err
    12 00000040 <rep 5h>           
    13 00000068 [1301000000000000]                              dq      Case_oct        ;o
    14 00000070 [2D01000000000000]                              dq      Case_hex        ;p
    15 00000078 [4701000000000000]-     times ('s' - 'p' - 1)   dq      Case_err
    15 00000078 <rep 2h>           
    16 00000088 [8700000000000000]                              dq      Case_str        ;s
    17 00000090 [4701000000000000]                              dq      Case_err        ;t - error
    18 00000098 [B300000000000000]                              dq      Case_uns        ;u
    19 000000A0 [4701000000000000]                              dq      Case_err        ;v - error
    20 000000A8 [4701000000000000]                              dq      Case_err        ;w - error
    21 000000B0 [2D01000000000000]                              dq      Case_hex        ;x
    22                                  
    23                                  ;=================================================
    24                                  
    25                                  section .data
    26                                  
    27 00000000 00                      buf_zero:       db 0
    28 00000001 00<rep 40h>             Buffer:         times 64 db 0
    29                                  BufferLng:      equ $ - Buffer
    30                                  
    31 00000041 0A3D3D57726F6E6720-     Error:          db 0xA, "==Wrong specification==", 0xA, "==0nly these speceficators are supported:==", 0xA, "==b c d i o p s u x==", 0xA
    31 0000004A 737065636966696361-
    31 00000053 74696F6E3D3D0A3D3D-
    31 0000005C 306E6C792074686573-
    31 00000065 652073706563656669-
    31 0000006E 6361746F7273206172-
    31 00000077 6520737570706F7274-
    31 00000080 65643A3D3D0A3D3D62-
    31 00000089 206320642069206F20-
    31 00000092 702073207520783D3D-
    31 0000009B 0A                 
    32                                  ErrorLng:       equ $ - Error
    33                                  
    34 0000009C 257320256420257520-     message db "%s %d %u %b %o %x", 0
    34 000000A5 256220256F20257800 
    35                                  
    36                                  ;=================================================
    37                                  
    38                                  section .text
    39                                  
    40                                  global _start
    41                                  
    42                                  _start:
    43 00000000 6A85                                    push -123
    44 00000002 6A85                                    push -123
    45 00000004 6A85                                    push -123
    46 00000006 6A85                                    push -123
    47 00000008 6A85                                    push -123
    48 0000000A 68[9C000000]                            push message
    49 0000000F 68[9C000000]                            push message
    50                                  
    51 00000014 E80C000000                              call MYprintf
    52                                  
    53 00000019 B801000000                              mov eax,    1
    54 0000001E BB00000000                              mov ebx,    0
    55 00000023 CD80                                    int 0x80
    56                                  
    57                                  ;=================================================
    58                                  ; Processes line as printf do
    59                                  ;=================================================
    60                                  ; Expects:      Needed data in stack
    61                                  ; Entry:        None
    62                                  ; Exit:         None
    63                                  ; Eliminate:    RSI, RDX, RAX
    64                                  ;=================================================
    65                                  MYprintf:
    66 00000025 415A                                    pop r10         ;store return address
    67                                  
    68 00000027 5E                                      pop rsi         ;load string
    69                                  
    70 00000028 48FFCE                                  dec rsi         ;compensate
    71                                  .poop:
    72 0000002B 48FFC6                                  inc rsi
    73 0000002E 8A06                                    mov al, byte [rsi]      ;load symbol
    74                                  
    75 00000030 3C00                                    cmp al, 0               ;check if terminate
    76 00000032 740B                                    je .terminate
    77                                  
    78 00000034 3C25                                    cmp al, '%'             ;check if it is speceficator
    79 00000036 740A                                    je .special
    80                                  
    81 00000038 E878010000                              call PutChar
    82                                  
    83 0000003D EBEC                                    jmp .poop
    84                                  
    85                                  .terminate:
    86 0000003F 4152                                    push r10         ;restore return address
    87                                  
    88 00000041 C3                                      ret
    89                                  
    90                                  
    91                                  .special:
    92 00000042 48FFC6                                  inc rsi
    93 00000045 8A06                                    mov al, byte [rsi]      ;load next symbol (%X)
    94                                  
    95 00000047 3C25                                    cmp al, '%'
    96 00000049 7507                                    jne .plazdarm
    97                                  
    98 0000004B E865010000                              call PutChar
    99                                  
   100 00000050 EBD9                                    jmp .poop
   101                                  
   102                                  .plazdarm:
   103 00000052 3C62                                    cmp al, 'b'             ;letter < b
   104 00000054 0F82ED000000                            jb Case_err
   105                                  
   106 0000005A 3C78                                    cmp al, 'x'             ;letter > x
   107 0000005C 0F87E5000000                            ja Case_err
   108                                  
   109 00000062 488B04C5[F0FCFFFF]                      mov rax, [((rax - 'b') * 8 + JUMP_TABLE)]
   110 0000006A FFE0                                    jmp rax
   111                                  
   112                                  ;=================================================
   113                                  ; %c printf style processing
   114                                  ;=================================================
   115                                  ; Expects:      None
   116                                  ; Entry:        None
   117                                  ; Exit:         None
   118                                  ; Eliminate:    RSI, RDX, RAX
   119                                  ;=================================================
   120                                  Case_chr:
   121 0000006C 58                                      pop rax
   122 0000006D 56                                      push rsi                ;store line
   123                                  
   124 0000006E 880425[01000000]                        mov [Buffer], al
   125                                  
   126 00000075 48BE-                                   mov rsi, Buffer
   126 00000077 [0100000000000000] 
   127                                  
   128 0000007F E831010000                              call PutChar
   129                                  
   130 00000084 5E                                      pop rsi                 ;restore line
   131                                  
   132 00000085 EBA4                                    jmp MYprintf.poop
   133                                  
   134                                  ;=================================================
   135                                  ; %s printf style processing
   136                                  ;=================================================
   137                                  ; Expects:      None
   138                                  ; Entry:        None
   139                                  ; Exit:         None
   140                                  ; Eliminate:    RSI, RDX, RAX
   141                                  ;=================================================
   142                                  Case_str:
   143 00000087 58                                      pop rax
   144                                  
   145 00000088 56                                      push rsi
   146                                  
   147 00000089 4889C6                                  mov rsi, rax
   148                                  
   149 0000008C E811010000                              call Strlen
   150                                  
   151 00000091 E831010000                              call PutS
   152                                  
   153 00000096 5E                                      pop rsi
   154                                  
   155                                  
   156 00000097 EB92                                    jmp MYprintf.poop
   157                                  
   158                                  ;=================================================
   159                                  ; %b printf style processing
   160                                  ;=================================================
   161                                  ; Expects:      None
   162                                  ; Entry:        None
   163                                  ; Exit:         None
   164                                  ; Eliminate:    RSI, RDX, RAX
   165                                  ;=================================================
   166                                  Case_bin:
   167 00000099 58                                      pop rax         ;Number
   168 0000009A BB02000000                              mov rbx, 2     ;Radix
   169 0000009F 48BF-                                   mov rdi, Buffer ;Buffer
   169 000000A1 [0100000000000000] 
   170                                  
   171 000000A9 E8B4000000                              call UNtoSC
   172                                  
   173 000000AE E978FFFFFF                              jmp MYprintf.poop
   174                                  
   175                                  ;=================================================
   176                                  ; %u printf style processing
   177                                  ;=================================================
   178                                  ; Expects:      None
   179                                  ; Entry:        None
   180                                  ; Exit:         None
   181                                  ; Eliminate:    RSI, RDX, RAX
   182                                  ;=================================================
   183                                  Case_uns:
   184 000000B3 58                                      pop rax         ;Number
   185 000000B4 BB0A000000                              mov rbx, 10     ;Radix
   186 000000B9 48BF-                                   mov rdi, Buffer ;Buffer
   186 000000BB [0100000000000000] 
   187                                  
   188 000000C3 E89A000000                              call UNtoSC
   189                                  
   190 000000C8 E95EFFFFFF                              jmp MYprintf.poop
   191                                  
   192                                  ;=================================================
   193                                  ; %d printf style processing
   194                                  ;=================================================
   195                                  ; Expects:      None
   196                                  ; Entry:        None
   197                                  ; Exit:         None
   198                                  ; Eliminate:    RSI, RDX, RAX
   199                                  ;=================================================
   200                                  Case_dec:
   201 000000CD 488B0424                                mov rax, [rsp]          ;peek number
   202 000000D1 4883F800                                cmp rax, 0
   203 000000D5 7D22                                    jge .no_minus
   204                                  
   205 000000D7 B02D                                    mov al, '-'
   206 000000D9 56                                      push rsi                ;store line
   207                                  
   208 000000DA 880425[01000000]                        mov [Buffer], al
   209                                  
   210 000000E1 48BE-                                   mov rsi, Buffer
   210 000000E3 [0100000000000000] 
   211                                  
   212 000000EB E8C5000000                              call PutChar
   213                                  
   214 000000F0 5E                                      pop rsi                 ;restore line
   215                                  
   216 000000F1 58                                      pop rax
   217                                  
   218 000000F2 48FFC8                                  dec rax                 ;dop code => norm code
   219 000000F5 48F7D0                                  not rax
   220                                  
   221 000000F8 50                                      push rax
   222                                  
   223                                  .no_minus:
   224 000000F9 58                                      pop rax         ;Number
   225 000000FA BB0A000000                              mov rbx, 10     ;Radix
   226 000000FF 48BF-                                   mov rdi, Buffer ;Buffer
   226 00000101 [0100000000000000] 
   227                                  
   228 00000109 E854000000                              call UNtoSC
   229                                  
   230 0000010E E918FFFFFF                              jmp MYprintf.poop
   231                                  
   232                                  ;=================================================
   233                                  ; %o printf style processing
   234                                  ;=================================================
   235                                  ; Expects:      None
   236                                  ; Entry:        None
   237                                  ; Exit:         None
   238                                  ; Eliminate:    RSI, RDX, RAX
   239                                  ;=================================================
   240                                  Case_oct:
   241 00000113 58                                      pop rax         ;Number
   242 00000114 BB08000000                              mov rbx, 8     ;Radix
   243 00000119 48BF-                                   mov rdi, Buffer ;Buffer
   243 0000011B [0100000000000000] 
   244                                  
   245 00000123 E83A000000                              call UNtoSC
   246                                  
   247 00000128 E9FEFEFFFF                              jmp MYprintf.poop
   248                                  
   249                                  ;=================================================
   250                                  ; %h printf style processing
   251                                  ;=================================================
   252                                  ; Expects:      None
   253                                  ; Entry:        None
   254                                  ; Exit:         None
   255                                  ; Eliminate:    RSI, RDX, RAX
   256                                  ;=================================================
   257                                  Case_hex:
   258 0000012D 58                                      pop rax         ;Number
   259 0000012E BB10000000                              mov rbx, 16     ;Radix
   260 00000133 48BF-                                   mov rdi, Buffer ;Buffer
   260 00000135 [0100000000000000] 
   261                                  
   262 0000013D E820000000                              call UNtoSC
   263                                  
   264 00000142 E9E4FEFFFF                              jmp MYprintf.poop
   265                                  
   266                                  ;=================================================
   267                                  ; %ANY_WRONG printf style processing
   268                                  ;=================================================
   269                                  ; Expects:      None
   270                                  ; Entry:        None
   271                                  ; Exit:         None
   272                                  ; Eliminate:    RSI, RDX, RAX
   273                                  ;=================================================
   274                                  Case_err:
   275 00000147 56                                      push rsi
   276                                  
   277 00000148 48BE-                                   mov rsi, Error
   277 0000014A [4100000000000000] 
   278 00000152 BA5B000000                              mov rdx, ErrorLng
   279 00000157 E86B000000                              call PutS
   280                                  
   281 0000015C 5E                                      pop rsi
   282                                  
   283 0000015D E9C9FEFFFF                              jmp MYprintf.poop
   284                                  
   285                                  ;=================================================
   286                                  ; Unsigned Numbers to String Converter
   287                                  ;=================================================
   288                                  ; Expects:      Buffer for digits (size ~30)
   289                                  ; Entry:        Buffer in RDI, Number in RAX, Radix in RBX
   290                                  ; Exit:         None
   291                                  ; Eliminate:    RSI, RDI, RAX, RBX, RDX
   292                                  ;=================================================
   293                                  UNtoSC:
   294 00000162 56                                      push rsi
   295                                  
   296                                  .one_digit:
   297 00000163 4831D2                                  xor rdx, rdx    ;rdx <- 0
   298                                  
   299 00000166 48F7F3                                  div rbx         ;rdx:rax / rbx => rax * rbx + (rdx)
   300                                  
   301                                  .transform:
   302 00000169 80C230                                  add dl, '0'     ;0 -> '0'
   303                                  
   304 0000016C 80FA39                                  cmp dl, '9'
   305 0000016F 772C                                    ja .letter_shift
   306                                  
   307                                  .put:
   308 00000171 8817                                    mov [rdi], dl
   309 00000173 48FFC7                                  inc rdi
   310                                  
   311 00000176 4839D8                                  cmp rax, rbx
   312 00000179 73E8                                    jae .one_digit
   313                                  
   314 0000017B 3C00                                    cmp al, 0
   315 0000017D 7406                                    je .skip_last_digit
   316                                  
   317 0000017F 88C2                                    mov dl, al
   318 00000181 B000                                    mov al, 0
   319 00000183 EBE4                                    jmp .transform
   320                                  
   321                                  .skip_last_digit:
   322                                  
   323 00000185 48FFCF                                  dec rdi
   324 00000188 4889FE                                  mov rsi, rdi
   325                                  .print:
   326 0000018B 8A06                                    mov al, [rsi]
   327 0000018D 3C00                                    cmp al, 0               ;check if terminate
   328 0000018F 740A                                    je .terminate
   329                                  
   330 00000191 E81F000000                              call PutChar
   331                                  
   332 00000196 48FFCE                                  dec rsi
   333 00000199 EBF0                                    jmp .print
   334                                  
   335                                  .terminate:
   336 0000019B 5E                                      pop rsi
   337                                  
   338 0000019C C3                                      ret
   339                                  
   340                                  
   341                                  .letter_shift:
   342 0000019D 80C207                                  add dl, 'A' - '9' - 1
   343 000001A0 EBCF                                    jmp .put
   344                                  
   345                                  ;=================================================
   346                                  ; Outputs char to a console
   347                                  ;=================================================
   348                                  ; Expects:      Line ends with terminate symbol 0
   349                                  ; Entry:        RSI = Address of string
   350                                  ; Exit:         RDX = Length of line
   351                                  ; Eliminate:    RDX, RAX
   352                                  ;=================================================
   353                                  Strlen:
   354 000001A2 4889F2                                  mov rdx, rsi
   355                                  
   356 000001A5 48FFCA                                  dec rdx         ;compensate
   357                                  .one_char:
   358 000001A8 48FFC2                                  inc rdx
   359 000001AB 8A02                                    mov al, [rdx]
   360 000001AD 3C00                                    cmp al, 0       ;check if terminate
   361 000001AF 75F7                                    jne .one_char
   362                                  
   363 000001B1 4829F2                                  sub rdx, rsi
   364                                  
   365 000001B4 C3                                      ret
   366                                  ;=================================================
   367                                  ; Outputs char to a console
   368                                  ;=================================================
   369                                  ; Expects:      None
   370                                  ; Entry:        RSI = Address of string
   371                                  ; Exit:         None
   372                                  ; Eliminate:    RSI, RDI, RDX, RAX
   373                                  ;=================================================
   374                                  PutChar:
   375                                                  ; push rcx
   376                                                  ; push r11
   377                                  
   378 000001B5 B801000000                              mov rax, 1
   379 000001BA BF01000000                              mov rdi, 1
   380 000001BF BA01000000                              mov rdx, 1
   381                                  
   382 000001C4 0F05                                    syscall
   383                                  
   384                                                  ; pop  r11
   385                                                  ; pop  rcx
   386                                  
   387 000001C6 C3                                      ret
   388                                  
   389                                  ;=================================================
   390                                  ; Outputs string to a console
   391                                  ;=================================================
   392                                  ; Expects:      None
   393                                  ; Entry:        RSI = Address of string RDX = Number of symbols
   394                                  ; Exit:         None
   395                                  ; Eliminate:    RSI, RDI, RDX, RAX
   396                                  ;=================================================
   397                                  PutS:
   398                                                  ; push rcx
   399                                                  ; push r11
   400                                  
   401 000001C7 B801000000                              mov rax, 1
   402 000001CC BF01000000                              mov rdi, 1
   403                                  
   404 000001D1 0F05                                    syscall
   405                                  
   406                                                  ; pop  r11
   407                                                  ; pop  rcx
   408                                  
   409 000001D3 C3                                      ret
   410                                  ;=================================================
